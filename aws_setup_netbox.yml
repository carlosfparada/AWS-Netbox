---

- name: Get nodes from Inventory and add to Groups
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - include_role: 
      name: utils_hosts_aws

- name: Set Cisco, Arista passwords and AAP/Netbox setup
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files: vars/main.yml
  tasks:

  # cat private-key.pem | ansible-vault encrypt_string  --stdin-name 'private_key' --output private-key.vault
  - ansible.builtin.include_vars: files/private-key.yml

  - name: Copy private key locally
    ansible.builtin.copy:
      content: "{{ private_key }}"
      dest: /tmp/private-key.pem
      mode: '0600'

  - name: Set Cisco password
    ansible.builtin.expect:
      command: "ssh -o StrictHostKeyChecking=no -o PubkeyAcceptedKeyTypes=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa -i /tmp/private-key.pem ec2-user@{{ groups['cisco'][0] }}"
      responses:
        # ip-10-0-0-197# configure terminal
        # ip-10-0-0-197(config)# aaa new-model
        # ip-10-0-0-197(config)# aaa authentication login default local enable
        # ip-10-0-0-197(config)# username ec2-user password xxxx
        # ip-10-0-0-197(config)# exit
        # ip-10-0-0-197# exit
        'ip-*':
          - configure terminal
          - aaa new-model
          - aaa authentication login default local enable
          - username {{ ec2_cisco_user }} password {{ ec2_cisco_pass }}
          - exit
          - exit
    no_log: false # hide passwords on logs

  - name: Set Arista password
    ansible.builtin.expect:
      command: "ssh -o StrictHostKeyChecking=no -i /tmp/private-key.pem ec2-user@{{ groups['arista'][0] }}"
      responses:
        # localhost> enable
        # localhost# configure terminal
        # localhost(config)# aaa authentication login default local
        # localhost(config)# username ec2-user secret 0 xxxx
        # localhost(config)# exit
        # localhost# exit
        'localhost*':
          - enable
          - configure terminal
          - aaa authentication login default local
          - username {{ ec2_arista_user }} secret 0 {{ ec2_arista_pass }}
          - exit
          - exit
    no_log: false # hide passwords on logs

  - name: Create an AAP Token
    ansible.platform.token:
      gateway_hostname: "https://{{ groups['aap'][0] }}"
      gateway_username: "admin"
      gateway_password: "{{ aap_password }}"
      gateway_validate_certs: false
      description: 'Token for Netbox access'
      scope: "write"
      state: present

  - name: Get AAP Job Template ID (Update IP Interface)
    ansible.controller.job_template:
      controller_host: "https://{{ groups['aap'][0] }}"
      # controller_oauthtoken: "{{ aap_token }}"
      controller_username: "admin"
      controller_password: "{{ aap_password }}"
      validate_certs: false
      name: "AWS Netbox: Update IP Interface"
      state: exists
    no_log: false
    register: job_template_ip

  - name: Get AAP Job Template ID (Update VLAN Interface)
    ansible.controller.job_template:
      controller_host: "https://{{ groups['aap'][0] }}"
      # controller_oauthtoken: "{{ aap_token }}"
      controller_username: "admin"
      controller_password: "{{ aap_password }}"
      validate_certs: false
      name: "AWS Netbox: Update VLAN Interface"
      state: exists
    no_log: false
    register: job_template_vlan_interface

  - name: Get AAP Job Template ID (Update VLAN)
    ansible.controller.job_template:
      controller_host: "https://{{ groups['aap'][0] }}"
      # controller_oauthtoken: "{{ aap_token }}"
      controller_username: "admin"
      controller_password: "{{ aap_password }}"
      validate_certs: false
      name: "AWS Netbox: Update VLAN"
      state: exists
    no_log: false
    register: job_template_vlan

  - name: Set Netbox URL
    ansible.builtin.set_fact:
      netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"

  - name: Create a Netbox Token (first time password)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/users/tokens/provision/"
      method: POST
      body: |
        { 
          "username": "admin",
          "password": "{{ hostvars[groups['netbox'][0]].instance_id }}"
        }
      status_code: 201
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
    register: netbox_token_first
    ignore_errors: true

  - name: Create a Netbox Token (not first time password)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/users/tokens/provision/"
      method: POST
      body: |
        { 
          "username": "admin",
          "password": "{{ ec2_netbox_pass }}"
        }
      status_code: 201
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
    register: netbox_token_not_first
    ignore_errors: true
    when: netbox_token_first is failed

  - name: Set token (first time password)
    ansible.builtin.set_fact:
      netbox_token: "{{ netbox_token_first }}"
    when: netbox_token_first is not failed

  - name: Set token (not first time password)
    ansible.builtin.set_fact:
      netbox_token: "{{ netbox_token_not_first }}"
    when: netbox_token_first is failed

  - name: Set Netbox password
    netbox.netbox.netbox_user:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      data:
          username: admin
          password: "{{ ec2_netbox_pass }}"
      state: present

  - name: Delete Webhook on Netbox (IP address)
    netbox.netbox.netbox_webhook:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      validate_certs: no
      data: 
        name: Webhook IP Address
      state: absent

  - name: Create Webhook on Netbox (IP address)
    netbox.netbox.netbox_webhook:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      validate_certs: no
      data: 
        name: Webhook IP Address
        content_types:    # void, only for backward-compatibility reasons
          - dcim.device   # void, only for backward-compatibility reasons
        enabled: true
        payload_url: "https://{{ groups['aap'][0] }}/api/controller/v2/job_templates/{{ job_template_ip.id }}/launch/"
        ssl_verification: no
        http_method: POST
        http_content_type: application/json
        additional_headers: "Authorization: Bearer {{ aap_token.token }}"
        body_template: !unsafe >-
          { 
          "extra_vars": 
            {
              "device": "{{ data['assigned_object']['device']['name'] }}",
              "interface": "{{ data['assigned_object']['name'] }}",
              "ip_address": "{{ data['address'] }}",
              "address_family": "{{ data['family']['value'] }}",
              "description": "{{ data['description'] }}",
              "event": "{{ event }}",
              "timestamp": "{{ timestamp }}",
              "data": "{{ data }}"
            }
          }
      state: present
    register: webhook_ip

  - name: Delete Webhook on Netbox (VLAN Interface)
    netbox.netbox.netbox_webhook:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      validate_certs: no
      data: 
        name: Webhook VLAN Interface
      state: absent

  - name: Create Webhook on Netbox (VLAN Interface)
    netbox.netbox.netbox_webhook:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      validate_certs: no
      data: 
        name: Webhook VLAN Interface
        content_types:    # void, only for backward-compatibility reasons
          - dcim.device   # void, only for backward-compatibility reasons
        enabled: true
        payload_url: "https://{{ groups['aap'][0] }}/api/controller/v2/job_templates/{{ job_template_vlan_interface.id }}/launch/"
        ssl_verification: no
        http_method: POST
        http_content_type: application/json
        additional_headers: "Authorization: Bearer {{ aap_token.token }}"
        body_template: !unsafe >-
          { 
          "extra_vars": 
            {
              "device": "{{ data['device']['name'] }}",
              "interface": "{{ data['name'] }}",
              "vlan_id": "{{ data['untagged_vlan']['vid'] }}",
              "vlan_name": "{{ data['untagged_vlan']['name'] }}",
              "event": "{{ event }}",
              "timestamp": "{{ timestamp }}",
              "data": "{{ data }}"
            },
            "limit": "{{ data['device']['name'] }}"
          }
      state: present
    register: webhook_vlan_interface

  - name: Delete Webhook on Netbox (VLAN)
    netbox.netbox.netbox_webhook:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      validate_certs: no
      data: 
        name: Webhook VLAN
      state: absent

  - name: Create Webhook on Netbox (VLAN)
    netbox.netbox.netbox_webhook:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      validate_certs: no
      data: 
        name: Webhook VLAN
        content_types:    # void, only for backward-compatibility reasons
          - dcim.device   # void, only for backward-compatibility reasons
        enabled: true
        payload_url: "https://{{ groups['aap'][0] }}/api/controller/v2/job_templates/{{ job_template_vlan.id }}/launch/"
        ssl_verification: no
        http_method: POST
        http_content_type: application/json
        additional_headers: "Authorization: Bearer {{ aap_token.token }}"
        body_template: !unsafe >-
          { 
          "extra_vars": 
            {
              "vlan_id": "{{ data['vid'] }}",
              "vlan_name": "{{ data['name'] }}",
              "state": "{{ data['status']['value'] }}",
              "event": "{{ event }}",
              "timestamp": "{{ timestamp }}",
              "data": "{{ data }}"
            },
            "limit": "arista"
          }
      state: present
    register: webhook_vlan

  - name: Delete Webhook on Netbox (EDA Config Context)
    netbox.netbox.netbox_webhook:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      validate_certs: no
      data: 
        name: Webhook Config Context (EDA)
      state: absent

  - name: Create Webhook on Netbox (EDA Config Context)
    netbox.netbox.netbox_webhook:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      validate_certs: no
      data: 
        name: Webhook Config Context (EDA)
        content_types:    # void, only for backward-compatibility reasons
          - dcim.device   # void, only for backward-compatibility reasons
        enabled: true
        payload_url: "http://{{ groups['aap'][0] }}:{{ eda_port }}"
        ssl_verification: no
        http_method: POST
        http_content_type: application/json
      state: present
    register: webhook_eda

  - name: Create an Event Rule (IP Address)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/extras/event-rules/"
      method: POST
      body: |
        { 
          "name": "Event Rule IP Address",
          "content_types": [
              "ipam.ipaddress"
          ],
          "action_type": "webhook",
          "action_object_type": "extras.webhook",
          "action_object_id": "{{ webhook_ip.webhook.id }}",
          "type_create": true,
          "type_update": true
        }
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
        Authorization: "Token {{ netbox_token.json.key }}"
      status_code: 201

  - name: Create an Event Rule (VLAN Interface)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/extras/event-rules/"
      method: POST
      body: |
        { 
          "name": "Event Rule VLAN Interface",
          "content_types": [
              "dcim.interface"
          ],
          "action_type": "webhook",
          "action_object_type": "extras.webhook",
          "action_object_id": "{{ webhook_vlan_interface.webhook.id }}",
          "type_create": true,
          "type_update": true
        }
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
        Authorization: "Token {{ netbox_token.json.key }}"
      status_code: 201

  - name: Create an Event Rule (VLAN)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/extras/event-rules/"
      method: POST
      body: |
        { 
          "name": "Event Rule VLAN",
          "content_types": [
              "ipam.vlan"
          ],
          "action_type": "webhook",
          "action_object_type": "extras.webhook",
          "action_object_id": "{{ webhook_vlan.webhook.id }}",
          "type_create": true,
          "type_update": true
        }
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
        Authorization: "Token {{ netbox_token.json.key }}"
      status_code: 201

  - name: Create an Event Rule (Config Context)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/extras/event-rules/"
      method: POST
      body: |
        { 
          "name": "Event Rule Config Context",
          "content_types": [
              "extras.configcontext"
          ],
          "action_type": "webhook",
          "action_object_type": "extras.webhook",
          "action_object_id": "{{ webhook_eda.webhook.id }}",
          "type_create": true,
          "type_update": true
        }
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
        Authorization: "Token {{ netbox_token.json.key }}"
      status_code: 201


  # - name: Delete Netbox Token
  #   netbox.netbox.netbox_token:
  #     netbox_url: "{{ netbox_url }}"
  #     netbox_token: "{{ netbox_token.json.key }}"
  #     data:
  #         key: "{{ netbox_token.json.key }}"
  #     state: absent

  # - name: Delete an AAP Token
  #   ansible.platform.token:
  #     gateway_hostname: "https://{{ groups['aap'][0] }}"
  #     gateway_username: "admin"
  #     gateway_password: "{{ aap_password }}"
  #     gateway_validate_certs: false
  #     description: 'Token for Netbox access'
  #     existing_token: "{{ aap_token }}"
  #     state: absent


- name: Rewrite and Update Netbox Inventory Source
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files: ../vars/main.yml
  vars:
    aap_hostname: "https://{{ groups['aap'][0] }}"
    aap_username: admin
    aap_password: "{{ admin_password }}"
    aap_validate_certs: false
    controller_inventory_sources:
      - name: Netbox Inventory Source
        inventory: Netbox Inventory
        source_vars:
          NETBOX_API: "{{ netbox_url }}"
          NETBOX_TOKEN: "{{ netbox_token.json.key }}"      
    controller_inventory_source_update:
      - name: Netbox Inventory Source Update
        description: Netbox Inventory Source Update
        organization: Default
        inventory: Netbox Inventory
        wait: True
  roles:
    - {role: infra.aap_configuration.controller_inventory_sources, when: controller_inventory_sources is defined}
    - {role: infra.aap_configuration.controller_inventory_source_update, when: controller_inventory_source_update is defined}


- name: Provision Arista Device
  hosts: arista
  gather_facts: false
  vars_files: vars/main.yml
  vars:
    ansible_connection: network_cli
    ansible_network_os: eos
  tasks:
    - name: Create Banner (Arista)
      arista.eos.eos_banner:
        banner: login
        text: "This is my login Banner, set by Ansible (v1)"
        state: present
      become: true

    - name: Create DNS Servers (Arista) 
      arista.eos.eos_config:
        lines:
          - ip name-server 8.8.8.8
          - ip name-server 8.8.8.9
      become: true

#     - name: Create Arista VLANs
#       arista.eos.eos_vlans:
#         config: "{{ arista_vlans }}"
#       become: yes

#     - name: Assign Arista VLANs to Interfaces
#       arista.eos.eos_l2_interfaces:
#         config: "{{ arista_l2_interfaces }}"
#       become: yes

#     - name: Create Arista IPv4 Addresses
#       arista.eos.eos_l3_interfaces:
#         config: "{{ arista_l3_interfaces }}"
#       become: yes

- name: Provision Cisco Device
  hosts: cisco
  gather_facts: false
  vars_files: vars/main.yml
  vars:
    ansible_connection: network_cli
    ansible_network_os: ios
  tasks:
    - name: Create Banner (Cisco)
      cisco.ios.ios_banner:
        banner: login
        text: "This is my login Banner, set by Ansible (v1)"
        state: present
      become: true

    - name: Create DNS Servers (Cisco) 
      cisco.ios.ios_config:
        lines:
          - ip name-server 8.8.8.8
          - ip name-server 8.8.8.9
      become: true

#     - name: Create Cisco VLANs
#       cisco.ios.ios_vlans:
#         config: "{{ cisco_vlans }}"
#       become: yes

#     - name: Assign Cisco VLANs to Interfaces
#       cisco.ios.ios_l2_interfaces:
#         config: "{{ cisco_l2_interfaces }}"
#       become: yes

#     - name: Create Cisco IPv4 Addresses
#       cisco.ios.ios_l3_interfaces:
#         config: "{{ cisco_l3_interfaces }}"
#       become: yes
