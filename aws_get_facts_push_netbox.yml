---

- name: Get nodes from Inventory and add to Groups
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - include_role: 
      name: utils_hosts_aws

- name: Collect Cisco and Arista Facts and Push to Netbox
  hosts: cisco
  gather_facts: false
  vars_files: vars/main.yml
  vars:
    ansible_connection: network_cli
    ansible_network_os: ios
    #ansible_command_timeout: 300
    #ssh_type: paramiko
  tasks:
    - name: Cisco Facts
      #connection: local
      cisco.ios.ios_facts:
        gather_subset:
          - hardware
        gather_network_resources:
          - "interfaces"
          - "l2_interfaces"
          - "l3_interfaces"
          - "acl_interfaces"
          - "static_routes" 
          - "acls" 
          - "vlans"
      register: _ios_facts
      #become: true
    - name: Debug IOS facts
      debug:
        var: _ios_facts
    - name: Set IOS facts
      set_fact:
        _facts: "{{ _ios_facts }}"

- name: Collect Arista Facts
  hosts: arista
  gather_facts: false
  vars_files: vars/main.yml
  vars:
    ansible_connection: network_cli
    ansible_network_os: eos
    #ansible_command_timeout: 300
    #ssh_type: paramiko
  tasks:
    - name: EOS Facts
      #connection: local
      arista.eos.eos_facts:
        gather_subset: all
        #gather_network_resources: all
      register: _eos_facts
      #become: true
    - name: Debug EOS facts
      debug:
        var: _eos_facts
    - name: Set EOS facts
      set_fact:
        _facts: "{{ _eos_facts }}"

- name: Push to Netbox
  hosts: cisco,arista
  gather_facts: false
  vars_files: vars/main.yml
  vars:
    ansible_connection: local
    #ansible_command_timeout: 300
    #ssh_type: paramiko
  tasks:
    - name: Create a Token
      ansible.builtin.uri:
        url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000/api/users/tokens/provision/"
        method: POST
        body: |
          { 
            "username": "admin",
            "password": "{{ hostvars[groups['netbox'][0]].instance_id }}"
          }
        status_code: 201
        body_format: json
        headers:
          Content-Type: "application/json"
          Accept: "application/json; indent=4"
      run_once: true
      delegate_to: localhost
      register: netbox_token

    - name: all
      debug:
        var: _facts

    - name: Push site data to Netbox
      netbox.netbox.netbox_site:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          name: "{{ site }}"
          slug: "{{ site }}"
          description: "Site located in {{ site }}"
          status: Active
        state: present
      delegate_to: localhost
      throttle: 1

    - name: Set Manufacturer (Cisco)
      set_fact:
        manufacturer: "ios"
      when: hostvars[inventory_hostname].tags is defined and hostvars[inventory_hostname].tags.Name | regex_search("^cisco-(.*)$")
      delegate_to: localhost

    - name: Set Manufacturer (Arista)
      set_fact:
        manufacturer: "eos"
      when: hostvars[inventory_hostname].tags is defined and hostvars[inventory_hostname].tags.Name | regex_search("^arista-(.*)$")
      delegate_to: localhost

    - name: Push Manufacturer to Netbox
      netbox.netbox.netbox_manufacturer:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          name: "{{ manufacturer }}"
        state: present
      throttle: 1
      delegate_to: localhost

    - name: Push device type data to Netbox
      netbox.netbox.netbox_device_type:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          model: "{{ _facts.ansible_facts.ansible_net_system | default('unknown') }}"
          manufacturer: "{{ manufacturer }}"
          slug: "{{ _facts.ansible_facts.ansible_net_system | default('unknown') }}"
        state: present
      throttle: 1
      delegate_to: localhost

    - name: Push devices role data to Netbox
      netbox.netbox.netbox_device_role:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          name: "demo"
        state: present
      throttle: 1
      delegate_to: localhost

    - name: Push devices data to Netbox
      netbox.netbox.netbox_device:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          name: "{{ inventory_hostname }}"
          site: "{{ site }}"
          serial: "{{ _facts.ansible_facts.ansible_net_serialnum | default(omit) }}"
          device_type: "{{ _facts.ansible_facts.ansible_net_system | default('unknown') }}"
          device_role: "demo"
          local_context_data: "{{ _facts.ansible_facts.ansible_network_resources }}"
          comments: "Added by AAP"
        state: present
      throttle: 1
      delegate_to: localhost

    - name: Push interfaces data to Netbox (Cisco)
      netbox.netbox.netbox_device_interface:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          device: "{{ inventory_hostname }}"
          name: "{{ item.name }}"
          type: "Virtual"
          description: "{{ item.name }} description"
        state: present
      loop: "{{ _facts.ansible_facts.ansible_network_resources.interfaces }}"
      when: hostvars[inventory_hostname].tags.Name | regex_search("^cisco-(.*)$") and _facts.ansible_facts.ansible_network_resources.interfaces is defined
      throttle: 1
      delegate_to: localhost

    - name: Push interfaces data to Netbox (Arista)
      netbox.netbox.netbox_device_interface:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          device: "{{ inventory_hostname }}"
          name: "{{ item.key }}"
          type: "Virtual"
          description: "{{ item.key }} description"
        state: present
      with_dict: "{{ _facts.ansible_facts.ansible_net_interfaces }}"
      when: hostvars[inventory_hostname].tags.Name | regex_search("^arista-(.*)$")
      throttle: 1
      delegate_to: localhost

    - name: Push IPv4 addresses data to Netbox (Cisco)
      netbox.netbox.netbox_ip_address:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          assigned_object:
            name: "{{ item.name }}"
            device: "{{ inventory_hostname }}"
          #family: 4
          address: "{{ item.ipv4[0].address }}"
          description: "{{ item.ipv4[0].address }} description"
        state: present
      loop: "{{ _facts.ansible_facts.ansible_network_resources.l3_interfaces }}"
      #when: _facts.ansible_facts.ansible_network_resources.l3_interfaces is defined and item.ipv4 is defined and item.ipv4[0].address != ""
      when: hostvars[inventory_hostname].tags.Name | regex_search("^cisco-(.*)$") and item.ipv4[0].address is defined
      throttle: 1
      delegate_to: localhost

    - name: Push IPv4 addresses data to Netbox (Arista)
      netbox.netbox.netbox_ip_address:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          assigned_object:
            name: "{{ item.key }}"
            device: "{{ inventory_hostname }}"
          #family: 4
          address: "{{ item.value.ipv4.address }}"
          description: "{{ item.value.ipv4.address }} description"
        state: present
      with_dict: "{{ _facts.ansible_facts.ansible_net_interfaces }}"
      when: hostvars[inventory_hostname].tags.Name | regex_search("^arista-(.*)$") and item.value.ipv4.address is defined
      throttle: 1
      delegate_to: localhost

    - name: Push VLANs data to Netbox
      netbox.netbox.netbox_vlan:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          site: "{{ site }}"
          name: "{{ item.name }}"
          vid: "{{ item.vlan_id }}"
        state: present
      loop: "{{ _facts.ansible_facts.ansible_network_resources.vlans }}"
      when: _facts.ansible_facts.ansible_network_resources.vlans is defined and item is defined
      throttle: 1
      delegate_to: localhost

    - name: Delete Token
      netbox.netbox.netbox_token:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        data:
            # user: admin
            # password: "{{ hostvars[groups['netbox'][0]].instance_id }}"
            key: "{{ netbox_token.json.key }}"
        state: absent
      run_once: true
      delegate_to: localhost

# Arista 
# _eos_facts:
#   ansible_facts:
#     ansible_network_resources: {}
#     ansible_net_gather_network_resources: []
#     ansible_net_gather_subset:
#       - interfaces
#       - default
#       - hardware
#       - config
#     ansible_net_all_ipv4_addresses:
#       - 10.0.0.20
#     ansible_net_all_ipv6_addresses: []
#     ansible_net_interfaces:
#       Ethernet1:
#         description: ''
#         macaddress: 0e:a0:e2:99:22:99
#         mtu: 1500
#         bandwidth: 0
#         duplex: duplexFull
#         lineprotocol: up
#         operstatus: connected
#         type: routed
#         ipv4:
#           address: 10.0.0.20
#           masklen: 24
#     ansible_net_neighbors: {}
#     ansible_net_serialnum: B54601C9BD952D7A7526391F53D9B868
#     ansible_net_hostname: localhost
#     ansible_net_fqdn: localhost
#     ansible_net_system: eos
#     ansible_net_model: vEOS
#     ansible_net_version: 4.32.2F-cloud
#     ansible_net_api: cliconf
#     ansible_net_python_version: 3.12.5
#     ansible_net_filesystems: []
#     ansible_net_memfree_mb: 1999.67578125
#     ansible_net_memtotal_mb: 7583.98046875
#     ansible_net_config: "show running-config\r\n% Invalid input (privileged mode required)\r\nlocalhost>"
#   failed: false
#   changed: false
# _ansible_verbose_always: true
# _ansible_no_log: false
# changed: false

# Cisco
# _ios_facts:
#   ansible_facts:
#     ansible_network_resources:
#       static_routes:
#         - address_families:
#             - afi: ipv4
#               routes:
#                 - next_hops:
#                     - interface: GigabitEthernet1
#                       forward_router_address: 10.0.0.1
#                   dest: 0.0.0.0/0
#         - vrf: GS
#           address_families:
#             - afi: ipv4
#               routes:
#                 - next_hops:
#                     - interface: GigabitEthernet1
#                       forward_router_address: 10.0.0.1
#                       global: true
#                   dest: 0.0.0.0/0
#       vlans:
#         - name: default
#           vlan_id: 1
#           state: active
#           shutdown: disabled
#           mtu: 1500
#         - name: fddi-default
#           vlan_id: 1002
#           state: active
#           shutdown: enabled
#           mtu: 1500
#         - name: token-ring-default
#           vlan_id: 1003
#           state: active
#           shutdown: enabled
#           mtu: 1500
#         - name: fddinet-default
#           vlan_id: 1004
#           state: active
#           shutdown: enabled
#           mtu: 1500
#         - name: trnet-default
#           vlan_id: 1005
#           state: active
#           shutdown: enabled
#           mtu: 1500
#       interfaces:
#         - name: GigabitEthernet1
#           enabled: true
#         - name: VirtualPortGroup0
#           enabled: true
#       l2_interfaces:
#         - name: VirtualPortGroup0
#         - name: GigabitEthernet1
#       acl_interfaces: []
#       l3_interfaces:
#         - name: GigabitEthernet1
#           ipv4:
#             - dhcp:
#                 enable: true
#           ipv6:
#             - address: dhcp
#             - enable: true
#         - name: VirtualPortGroup0
#           ipv4:
#             - address: 192.168.35.101/24
#       acls:
#         - afi: ipv4
#           acls:
#             - name: GS_NAT_ACL
#               acl_type: standard
#               aces:
#                 - sequence: 10
#                   grant: permit
#                   source:
#                     address: 192.168.35.0
#                     wildcard_bits: 0.0.0.255
#             - name: meraki-fqdn-dns
#               acl_type: extended
#     ansible_net_gather_network_resources:
#       - static_routes
#       - vlans
#       - interfaces
#       - l2_interfaces
#       - acl_interfaces
#       - l3_interfaces
#       - acls
#     ansible_net_gather_subset:
#       - default
#       - hardware
#     ansible_net_system: ios
#     ansible_net_model: C8000V
#     ansible_net_image: bootflash:packages.conf
#     ansible_net_version: 17.15.02a
#     ansible_net_hostname: ip-10-0-0-174
#     ansible_net_api: cliconf
#     ansible_net_python_version: 3.12.5
#     ansible_net_iostype: IOS-XE
#     ansible_net_operatingmode: autonomous
#     ansible_net_serialnum: 9ZHDILKAC33
#     ansible_net_filesystems:
#       - 'bootflash:'
#     ansible_net_filesystems_info:
#       'bootflash:':
#         spacetotal_kb: 11328712
#         spacefree_kb: 9849108
#     ansible_net_cpu_utilization:
#       core:
#         five_seconds: 0
#         one_minute: 0
#         five_minutes: 0
#         five_seconds_interrupt: 0
#     ansible_net_memtotal_mb: 1558.761360168457
#     ansible_net_memfree_mb: 1290.5968742370605
#   failed: false
#   changed: false
# _ansible_verbose_always: true
# _ansible_no_log: false
# changed: false