---

- name: Get nodes from Inventory and add to Groups
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - include_role: 
      name: utils_hosts_aws

- name: Collect Cisco and Arista Facts and Push to Netbox
  hosts: cisco
  gather_facts: false
  vars_files: vars/main.yml
  vars:
    ansible_connection: network_cli
    ansible_network_os: ios
    #ansible_command_timeout: 300
    #ssh_type: paramiko
  tasks:
    - name: Cisco Facts
      #connection: local
      cisco.ios.ios_facts:
        gather_subset:
          - hardware
        gather_network_resources:
          - "interfaces"
          - "l2_interfaces"
          - "l3_interfaces"
          - "acl_interfaces"
          - "static_routes" 
          - "acls" 
          - "vlans"
      register: _ios_facts
      #become: true
    - name: Debug IOS facts
      debug:
        var: _ios_facts
    - name: Set IOS facts
      set_fact:
        _facts: "{{ _ios_facts }}"

- name: Collect Arista Facts
  hosts: arista
  gather_facts: false
  vars_files: vars/main.yml
  vars:
    ansible_connection: network_cli
    ansible_network_os: eos
    #ansible_command_timeout: 300
    #ssh_type: paramiko
  tasks:
    - name: EOS Facts
      #connection: local
      arista.eos.eos_facts:
        gather_subset: all
        #gather_network_resources: all
      register: _eos_facts
      #become: true
    - name: Debug EOS facts
      debug:
        var: _eos_facts
    - name: Set EOS facts
      set_fact:
        _facts: "{{ _eos_facts }}"

- name: Push to Netbox
  hosts: cisco,arista
  gather_facts: false
  vars_files: vars/main.yml
  vars:
    ansible_connection: local
    #ansible_command_timeout: 300
    #ssh_type: paramiko
  tasks:
    - name: Create a Token
      ansible.builtin.uri:
        url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000/api/users/tokens/provision/"
        method: POST
        body: |
          { 
            "username": "admin",
            "password": "{{ hostvars[groups['netbox'][0]].instance_id }}"
          }
        status_code: 201
        body_format: json
        headers:
          Content-Type: "application/json"
          Accept: "application/json; indent=4"
      run_once: true
      delegate_to: localhost
      register: netbox_token

    - name: all
      debug:
        var: _facts

    - name: Push site data to Netbox
      netbox.netbox.netbox_site:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          name: "{{ site }}"
          slug: "{{ site }}"
          description: "Site located in {{ site }}"
          status: Active
        state: present
      delegate_to: localhost
      throttle: 1

    - name: Set Manufacturer (Cisco)
      set_fact:
        manufacturer: "ios"
      when: hostvars[inventory_hostname].tags is defined and hostvars[inventory_hostname].tags.Name | regex_search("^cisco-(.*)$")
      delegate_to: localhost

    - name: Set Manufacturer (Arista)
      set_fact:
        manufacturer: "eos"
      when: hostvars[inventory_hostname].tags is defined and hostvars[inventory_hostname].tags.Name | regex_search("^arista-(.*)$")
      delegate_to: localhost

    - name: Push Manufacturer to Netbox
      netbox.netbox.netbox_manufacturer:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          name: "{{ manufacturer }}"
        state: present
      throttle: 1
      delegate_to: localhost

    - name: Push device type data to Netbox
      netbox.netbox.netbox_device_type:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          model: "{{ _facts.ansible_facts.ansible_net_system | default('unknown') }}"
          manufacturer: "{{ manufacturer }}"
          slug: "{{ _facts.ansible_facts.ansible_net_system | default('unknown') }}"
        state: present
      throttle: 1
      delegate_to: localhost

    - name: Push devices role data to Netbox
      netbox.netbox.netbox_device:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          name: "demo"
          site: "{{ site }}"
          role: "demo"
        state: present
      throttle: 1
      delegate_to: localhost

    - name: Push devices data to Netbox
      netbox.netbox.netbox_device:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          name: "{{ inventory_hostname }}"
          site: "{{ site }}"
          serial: "{{ _facts.ansible_facts.ansible_net_serialnum | default(omit) }}"
          device_type: "{{ _facts.ansible_facts.ansible_net_system | default('unknown') }}"
          device_role: "demo"
          local_context_data: "{{ _facts.ansible_facts.ansible_network_resources }}"
          comments: "Added by AAP"
        state: present
      throttle: 1
      delegate_to: localhost

    - name: Push interfaces data to Netbox
      netbox.netbox.netbox_device_interface:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          device: "{{ inventory_hostname }}"
          name: "{{ item.name }}"
          type: "Virtual"
          description: "{{ item.name }} description"
        state: present
      loop: "{{ _facts.ansible_facts.ansible_network_resources.interfaces }}"
      when: _facts.ansible_facts.ansible_network_resources.interfaces is defined
      throttle: 1
      delegate_to: localhost

    - name: Push IPv4 addresses data to Netbox
      netbox.netbox.netbox_ip_address:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          assigned_object:
            device: "{{ inventory_hostname }}"
            name: "{{ item.name }}"
          family: 4
          address: "{{ item.ipv4[0].address }}"
          description: "{{ item.ipv4[0].address }} description"
        state: present
      loop: "{{ _facts.ansible_facts.ansible_network_resources.l3_interfaces }}"
      when: _facts.ansible_facts.ansible_network_resources.l3_interfaces is defined and item.ipv4 is defined and item.ipv4[0].address != ""
      throttle: 1
      delegate_to: localhost

    - name: Push VLANs data to Netbox
      netbox.netbox.netbox_vlan:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: "{{ netbox_token.json.key }}"
        validate_certs: no
        data: 
          site: "{{ site }}"
          name: "{{ item.name }}"
          vid: "{{ item.vlan_id }}"
        state: present
      loop: "{{ _facts.ansible_facts.ansible_network_resources.vlans }}"
      when: _facts.ansible_facts.ansible_network_resources.vlans is defined and item is defined
      throttle: 1
      delegate_to: localhost

    - name: Delete Token
      netbox.netbox.netbox_user:
        netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"
        netbox_token: thisIsMyToken
        data:
          username: admin
          password: MyPassword
        state: absent
      delegate_to: localhost
