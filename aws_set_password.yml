---

- name: Get nodes from Inventory and add to Groups
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
  - include_role: 
      name: utils_hosts_aws

- name: Set Cisco and Arista passwords
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files: vars/main.yml
  tasks:

  # cat private-key.pem | ansible-vault encrypt_string  --stdin-name 'private_key' --output private-key.vault
  - ansible.builtin.include_vars: files/private-key.yml

  - name: Copy private key locally
    ansible.builtin.copy:
      content: "{{ private_key }}"
      dest: /tmp/private-key.pem
      mode: '0600'

  - name: Set Cisco password
    ansible.builtin.expect:
      command: "ssh -o StrictHostKeyChecking=no -o PubkeyAcceptedKeyTypes=+ssh-rsa -o HostKeyAlgorithms=+ssh-rsa -i /tmp/private-key.pem ec2-user@{{ groups['cisco'][0] }}"
      responses:
        # ip-10-0-0-197# configure terminal
        # ip-10-0-0-197(config)# aaa new-model
        # ip-10-0-0-197(config)# aaa authentication login default local enable
        # ip-10-0-0-197(config)# username ec2-user password xxxx
        # ip-10-0-0-197(config)# exit
        # ip-10-0-0-197# exit
        'ip-*':
          - configure terminal
          - aaa new-model
          - aaa authentication login default local enable
          - username {{ ec2_cisco_user }} password {{ ec2_cisco_pass }}
          - exit
          - exit
    no_log: false # hide passwords on logs

  - name: Set Arista password
    ansible.builtin.expect:
      command: "ssh -o StrictHostKeyChecking=no -i /tmp/private-key.pem ec2-user@{{ groups['arista'][0] }}"
      responses:
        # localhost> enable
        # localhost# configure terminal
        # localhost(config)# aaa authentication login default local
        # localhost(config)# username ec2-user secret 0 xxxx
        # localhost(config)# exit
        # localhost# exit
        'localhost*':
          - enable
          - configure terminal
          - aaa authentication login default local
          - username {{ ec2_arista_user }} secret 0 {{ ec2_arista_pass }}
          - exit
          - exit
    no_log: false # hide passwords on logs

  - name: Set Netbox URL
    set_fact:
      netbox_url: "http://{{ hostvars[groups['netbox'][0]].public_dns_name }}:8000"

  - name: Create a Token (first time)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/users/tokens/provision/"
      method: POST
      body: |
        { 
          "username": "admin",
          "password": "{{ hostvars[groups['netbox'][0]].instance_id }}"
        }
      status_code: 201
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
    register: netbox_token
    ignore_errors: true

  - name: Create a Token (not first time)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/users/tokens/provision/"
      method: POST
      body: |
        { 
          "username": "admin",
          "password": "{{ ec2_netbox_pass }}"
        }
      status_code: 201
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
    register: netbox_token
    ignore_errors: true
    when: netbox_token is failed

  - name: Set Netbox password
    netbox.netbox.netbox_user:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      data:
          username: admin
          password: "{{ ec2_netbox_pass }}"
      state: present

  # - name: Create Webhook on Netbox (IP address)
  #   netbox.netbox.netbox_webhook:
  #     netbox_url: "{{ netbox_url }}"
  #     netbox_token: "{{ netbox_token.json.key }}"
  #     validate_certs: no
  #     data: 
  #       name: Webhook IP Address
  #       content_types:
  #         - dcim.device
  #       # type_create: true
  #       # type_update: true
  #       # type_delete: true
  #       enabled: true
  #       payload_url: "https://{{ groups['aap'][0] }}/api/controller/v2/job_templates/XX/launch/"
  #       ssl_verification: no
  #       http_method: POST
  #       http_content_type: application/json
  #       additional_headers: "Authorization: Bearer {{ netbox_token.json.key }}"
  #       body_template: !unsafe >-
  #         { 
  #         "extra_vars": 
  #           {
  #             "device": "{{ data['assigned_object']['device']['name'] }}",
  #             "interface": "{{ data['assigned_object']['name'] }}",
  #             "ip_address": "{{ data['address'] }}",
  #             "address_family": "{{ data['family']['value'] }}",
  #             "description": "{{ data['description'] }}",
  #             "event": "{{ event }}",
  #             "timestamp": "{{ timestamp }}",
  #             "data": "{{ data }}"
  #           },
  #           "limit": "{{ data['assigned_object']['device']['name'] }}"
  #         }
  #     state: present

  - name: Create an Event Rule (IP Address)
    ansible.builtin.uri:
      url: "{{ netbox_url }}/api/extras/event-rules/"
      method: POST
      body: |
        { 
          "name": "Event Rule IP Address",
          "content_types": [
              "ipam.ipaddress"
            ]
        }
      body_format: json
      headers:
        Content-Type: "application/json"
        Accept: "application/json; indent=4"
        Authorization: "Token {{ netbox_token.json.key }}"
      status_code: 201
  - name: Delete Token
    netbox.netbox.netbox_token:
      netbox_url: "{{ netbox_url }}"
      netbox_token: "{{ netbox_token.json.key }}"
      data:
          key: "{{ netbox_token.json.key }}"
      state: absent
